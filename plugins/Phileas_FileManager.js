//=============================================================================
// Phileas_FileManager.js
//=============================================================================
// [Update History]
// 2025.February.16 Ver1.0.0 First Release

/*:
 * @target MZ
 * @plugindesc 1.0.0 Cross-platform file manager
 * @author Phileas
 * 
 * @param updateStamp
 * @text Update files stamp at startup
 * @type boolean
 * @desc Disable this before deploying the game
 * @default true
 * 
 * 
 * @help
 * 
 * This is an auxiliary plugin that allows to work with files in any environment.
 * 
 * The plugin provides the following methods that can be used in other
 * plugins or scripts:
 * - Phileas_FileManager.fileExistsSync - synchronously checks for file availability
 * - Phileas_FileManager.getFilesInDirectory - returns a list of files
 * in the specified directory, including nested directories of any level
 * 
 * Contact the author of the plugin if you need other methods or commands of the plugin.
 *
 *
 * In order for the plugin to work in the browser and on mobile devices, it is necessary
 * the current data/FilesStamp.json file.
 * This file contains information about all the game files.
 * This file is automatically generated when the game starts, if enabled
 * the updateStamp parameter. This plugin parameter is recommended
 * disable it before deployment.
 * 
 * 
 * You can always write to the author if you need other features or even plugins.
 * Boosty: https://boosty.to/phileas
 * RPG Maker Web: https://forums.rpgmakerweb.com/index.php?members/phileas.176075/
 * RPG Maker Union: https://rpgmakerunion.ru/id/phileas
 * Email: olek.olegovich gmail.com
 * Telegram: olekolegovich
 * 
 *-----------------------------------------------------------------------------
 * [License]
 * This plugin is released under MIT license.
 * http://opensource.org/licenses/mit-license.php
 *
 * This means that you can freely use the plugin in non-commercial and commercial games and even edit it.
 * But be sure to include me in the credits!
 */

/*:ru
 * @target MZ
 * @plugindesc 1.0.0 Кроссплатформенный менеджер файлов
 * @author Phileas
 * 
 * @param updateStamp
 * @text Обновить штамп файлов при запуске
 * @type boolean
 * @desc Отключите перед деплоем игры
 * @default true
 * 
 * 
 * @help
 * 
 * Это вспомогательный плагин, который позволяет работать с файлами в любой среде.
 * 
 * Плагин предоставляет следующие методы, которые можно использовать в других
 * плагинах или в скриптах:
 * - Phileas_FileManager.fileExistsSync - синхронно проверяет наличие файла
 * - Phileas_FileManager.getFilesInDirectory - возвращает список файлов
 *   в указанной директории, включая вложенные директории любого уровня
 * 
 * Обратитесь к автору плагина, если вам нужны другие методы или команды плагина.
 * 
 * 
 * Чтобы плагин работал в браузере и на мобильных устройствах, необходим
 * актуальный файл data/FilesStamp.json.
 * Этот файл содержит данные обо всех файлах игры.
 * Этот файл автоматически генерируется при запуске игры, если включён
 * параметр updateStamp. Этот параметр плагина рекомендуется
 * отключить перед деплоеем.
 * 
 * 
 * Вы всегда можете написать автору, если вам нужны другие функции или даже плагины.
 * Boosty: https://boosty.to/phileas
 * RPG Maker Web: https://forums.rpgmakerweb.com/index.php?members/phileas.176075/
 * RPG Maker Union: https://rpgmakerunion.ru/id/phileas
 * Email: olek.olegovich gmail.com
 * Telegram: olekolegovich
 * 
 *-----------------------------------------------------------------------------
 * [License]
 * Этот плагин распространяется по лицензии MIT.
 * http://opensource.org/licenses/mit-license.php
 *
 * Это означает, что вы можете свободно использовать плагин в некоммерческих
 * и коммерческих играх и даже редактировать его.
 * Но обязательно укажите меня в титрах!
 * 
 */

 "use strict";


 function Phileas_FileManager() {
     throw new Error("This is a static class");
 }
 
 Phileas_FileManager._stampFile = "data/FilesStamp.json";
 Phileas_FileManager._cache = {};
 
 Phileas_FileManager._parameters = PluginManager.parameters("Phileas_FileManager");
 Phileas_FileManager._updateRequired = Phileas_FileManager._parameters["updateStamp"] == "true";
 
 Phileas_FileManager.scanFileSystem = async function() {
     if (!Utils.isNwjs() || !Phileas_FileManager._updateRequired) {
         return;
     }
 
     const fs = require("fs");
     const path = require("path");
     const projectPath = path.dirname(process.mainModule.filename);
     const stampFile = path.join(projectPath, Phileas_FileManager._stampFile);
 
     function scanDir(dir) {
         let result = {};
         fs.readdirSync(dir).forEach(file => {
             const fullPath = path.join(dir, file);
             if (fs.statSync(fullPath).isDirectory()) {
                 result[file] = scanDir(fullPath);
             } else {
                 result[file] = true;
             }
         });
 
         return result;
     }
 
     const fileTree = scanDir(projectPath);
     fs.writeFileSync(stampFile, JSON.stringify(fileTree, null, 2));
     console.log("Phileas_FileManager: file scanning completed");
 };
 
 Phileas_FileManager.loadCache = async function() {
     if (Utils.isNwjs()) {
         return;
     }
 
     try {
         const response = await fetch(Phileas_FileManager._stampFile);
 
         if (!response.ok) {
             throw new Error(`${Phileas_FileManager._stampFile} not found`);
         }
 
         Object.assign(Phileas_FileManager._cache, await response.json());
         console.log("Phileas_FileManager: cache loaded");
     } catch (error) {
         console.error("Phileas_FileManager: cache loading failed", error);
     }
 };
 
 Phileas_FileManager.fileExistsSync = function(path) {
     if (Utils.isNwjs()) {
         const fs = require("fs");
         return fs.existsSync(path);
     }
 
     const parts = path.split("/");
     let current = Phileas_FileManager._cache;
     for (const part of parts) {
         if (!current[part]) {
             return false;
         }
 
         current = current[part];
     }
 
     return true;
 };
 
 Phileas_FileManager.getFilesInDirectoryDesktop = function(path) {
     const fs = require("fs");
     const pathModule = require("path");
     const projectPath = pathModule.dirname(process.mainModule.filename);
     const fullPath = pathModule.join(projectPath, path);
 
     function scanDir(dir) {
         let files = [];
         fs.readdirSync(dir).forEach(file => {
             const filePath = pathModule.join(dir, file);
             if (fs.statSync(filePath).isDirectory()) {
                 files = files.concat(scanDir(filePath).map(subFile => file + "/" + subFile));
             } else {
                 files.push(file);
             }
         });
         return files;
     }
 
     if (!fs.existsSync(fullPath) || !fs.statSync(fullPath).isDirectory()) {
         console.warn("Path not found:", path);
         return [];
     }
 
     return scanDir(fullPath);
 }
 
 Phileas_FileManager.getFilesInDirectoryWeb = function(path) {
     const parts = path.split("/").filter(Boolean);
     let current = Phileas_FileManager._cache;
     for (const part of parts) {
         if (!current[part]) {
             return [];
         }
         current = current[part];
     }
 
     function collectFiles(node, prefix = "") {
         let files = [];
         for (const key in node) {
             if (typeof node[key] === "object") {
                 files = files.concat(collectFiles(node[key], prefix + key + "/"));
             } else {
                 files.push(prefix + key);
             }
         }
         return files;
     }
 
     return collectFiles(current);
 }
 
 Phileas_FileManager.getFilesInDirectory = function(path) {
     return Utils.isNwjs()
         ? Phileas_FileManager.getFilesInDirectoryDesktop(path)
         : Phileas_FileManager.getFilesInDirectoryWeb(path);
 };
 
 Phileas_FileManager.scanFileSystem();
 Phileas_FileManager.loadCache();
 