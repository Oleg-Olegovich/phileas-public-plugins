//=============================================================================
// Phileas_FileSystem.js
//=============================================================================
// [Update History]
// 2025.February.16 Ver1.0.0 First Release

/*:
 * @target MZ
 * @plugindesc 1.0.0 Cross-platform file manager
 * @author Phileas
 * 
 * @param updateStamp
 * @text Update files stamp at startup
 * @type boolean
 * @desc Disable this before deploying the game
 * @default true
 * 
 * 
 * @help
 * 
 * This is an auxiliary plugin that allows to work with files in any environment.
 * 
 * The plugin provides the following methods that can be used in other
 * plugins or scripts:
 * - Phileas_FileSystem.fileExistsSync - synchronously checks for file availability
 * - Phileas_FileSystem.getFilesInDirectory - returns a list of files
 * in the specified directory, including nested directories of any level
 * 
 * Contact the author of the plugin if you need other methods or commands of the plugin.
 *
 *
 * In order for the plugin to work in the browser and on mobile devices, it is necessary
 * the current data/FilesStamp.json file.
 * This file contains information about all the game files.
 * This file is automatically generated when the game starts, if enabled
 * the updateStamp parameter. This plugin parameter is recommended
 * disable it before deployment.
 * 
 * 
 * You can always write to the author if you need other features or even plugins.
 * Boosty: https://boosty.to/phileas
 * RPG Maker Web: https://forums.rpgmakerweb.com/index.php?members/phileas.176075/
 * RPG Maker Union: https://rpgmakerunion.ru/id/phileas
 * Email: olek.olegovich gmail.com
 * Telegram: olekolegovich
 * 
 *-----------------------------------------------------------------------------
 * [License]
 * This plugin is released under MIT license.
 * http://opensource.org/licenses/mit-license.php
 *
 * This means that you can freely use the plugin in non-commercial and commercial games and even edit it.
 * But be sure to include me in the credits!
 */

/*:ru
 * @target MZ
 * @plugindesc 1.0.0 Кроссплатформенный менеджер файлов
 * @author Phileas
 * 
 * @param updateStamp
 * @text Обновить штамп файлов при запуске
 * @type boolean
 * @desc Отключите перед деплоем игры
 * @default true
 * 
 * 
 * @help
 * 
 * Это вспомогательный плагин, который позволяет работать с файлами в любой среде.
 * 
 * Плагин предоставляет следующие методы, которые можно использовать в других
 * плагинах или в скриптах:
 * - Phileas_FileSystem.fileExistsSync - синхронно проверяет наличие файла
 * - Phileas_FileSystem.getFilesInDirectory - возвращает список файлов
 *   в указанной директории, включая вложенные директории любого уровня
 * 
 * Обратитесь к автору плагина, если вам нужны другие методы или команды плагина.
 * 
 * 
 * Чтобы плагин работал в браузере и на мобильных устройствах, необходим
 * актуальный файл data/FilesStamp.json.
 * Этот файл содержит данные обо всех файлах игры.
 * Этот файл автоматически генерируется при запуске игры, если включён
 * параметр updateStamp. Этот параметр плагина рекомендуется
 * отключить перед деплоеем.
 * 
 * 
 * Вы всегда можете написать автору, если вам нужны другие функции или даже плагины.
 * Boosty: https://boosty.to/phileas
 * RPG Maker Web: https://forums.rpgmakerweb.com/index.php?members/phileas.176075/
 * RPG Maker Union: https://rpgmakerunion.ru/id/phileas
 * Email: olek.olegovich gmail.com
 * Telegram: olekolegovich
 * 
 *-----------------------------------------------------------------------------
 * [License]
 * Этот плагин распространяется по лицензии MIT.
 * http://opensource.org/licenses/mit-license.php
 *
 * Это означает, что вы можете свободно использовать плагин в некоммерческих
 * и коммерческих играх и даже редактировать его.
 * Но обязательно укажите меня в титрах!
 * 
 */

"use strict";


function Phileas_FileSystem() {
    throw new Error("This is a static class");
}

Phileas_FileSystem._stampFile = "data/FilesStamp.json";
Phileas_FileSystem._cache = {};

Phileas_FileSystem._parameters = PluginManager.parameters("Phileas_LanguageLocalisation");
Phileas_FileSystem._updateRequired = Phileas_FileSystem._parameters["updateStamp"] == "true";

Phileas_FileSystem.scanFileSystem = async function() {
    if (!Utils.isNwjs() || !Phileas_FileSystem._updateRequired) {
        return;
    }

    const fs = require("fs");
    const path = require("path");
    const projectPath = path.dirname(process.mainModule.filename);
    const stampFile = path.join(projectPath, Phileas_FileSystem._stampFile);

    function scanDir(dir) {
        let result = {};
        fs.readdirSync(dir).forEach(file => {
            const fullPath = path.join(dir, file);
            if (fs.statSync(fullPath).isDirectory()) {
                result[file] = scanDir(fullPath);
            } else {
                result[file] = true;
            }
        });

        return result;
    }

    const fileTree = scanDir(projectPath);
    fs.writeFileSync(stampFile, JSON.stringify(fileTree, null, 2));
    console.log("Phileas_FileSystem: file scanning completed");
};

Phileas_FileSystem.loadCache = async function() {
    if (Utils.isNwjs()) {
        return;
    }

    try {
        const response = await fetch(Phileas_FileSystem._stampFile);

        if (!response.ok) {
            throw new Error(`${Phileas_FileSystem._stampFile} not found`);
        }

        Object.assign(Phileas_FileSystem._cache, await response.json());
        console.log("Phileas_FileSystem: cache loaded");
    } catch (error) {
        console.error("Phileas_FileSystem: cache loading failed", error);
    }
};

Phileas_FileSystem.fileExistsSync = function(path) {
    if (Utils.isNwjs()) {
        const fs = require("fs");
        return fs.existsSync(path);
    }

    const parts = path.split("/");
    let current = Phileas_FileSystem._cache;
    for (const part of parts) {
        if (!current[part]) {
            return false;
        }

        current = current[part];
    }

    return true;
};

Phileas_FileSystem.getFilesInDirectoryDesktop = function(path) {
    const fs = require("fs");
    const pathModule = require("path");
    const projectPath = pathModule.dirname(process.mainModule.filename);
    const fullPath = pathModule.join(projectPath, path);

    function scanDir(dir) {
        let files = [];
        fs.readdirSync(dir).forEach(file => {
            const filePath = pathModule.join(dir, file);
            if (fs.statSync(filePath).isDirectory()) {
                files = files.concat(scanDir(filePath).map(subFile => file + "/" + subFile));
            } else {
                files.push(file);
            }
        });
        return files;
    }

    if (!fs.existsSync(fullPath) || !fs.statSync(fullPath).isDirectory()) {
        console.warn("Path not found:", path);
        return [];
    }

    return scanDir(fullPath);
}

Phileas_FileSystem.getFilesInDirectoryWeb = function(path) {
    const parts = path.split("/").filter(Boolean);
    let current = cache;
    for (const part of parts) {
        if (!current[part]) {
            return [];
        }
        current = current[part];
    }

    function collectFiles(node, prefix = "") {
        let files = [];
        for (const key in node) {
            if (typeof node[key] === "object") {
                files = files.concat(collectFiles(node[key], prefix + key + "/"));
            } else {
                files.push(prefix + key);
            }
        }
        return files;
    }

    return collectFiles(current);
}

Phileas_FileSystem.getFilesInDirectory = function(path) {
    return Utils.isNwjs()
        ? Phileas_FileSystem.getFilesInDirectoryDesktop(path)
        : Phileas_FileSystem.getFilesInDirectoryWeb(path);
};

Phileas_FileSystem.scanFileSystem();
Phileas_FileSystem.loadCache();
